module BounceSimulator
in lbtn: Float '$l,         # 左ボタン(値は水平方向の加速速度)
   cbtn: Float '$c,         # 中央ボタン(値は垂直方向の加速速度)
   rbtn: Float '$r,         # 右ボタン(値は水平方向の加速速度)
   tick: Float '(1000, 100) # ゲーム画面更新用のパルス
                            # (値としてプログラム開始からの経過時間[s]を持つ)

out ballPos         : (Float, Float) '_, # ボールの描画(値はそれぞれxy軸方向の速度)
    numButtonPressed: (Int, Int, Int) '_ # ボタンを押した際のスピーカーへの出力
                                         # (値は各ボタンが押された回数)

# 定数
node DELTA_ACCEL      = 2.0                # 左右のボタンによって変化する加速度の大きさ
node BALL_RADIUS      = 30.0               # ボールの半径
node GRAVITY_X        = 0.0                # 水平方向の重力加速度
node GRAVITY_Y        = -9.8               # 垂直方向の重力加速度
node LEFT_WALL_POS    = -120.0             # 左の壁の位置
node RIGHT_WALL_POS   = 120.0              # 右の壁の位置
node FLOOR_POS        = 0.0                # 床の位置
node E                = 0.7                # 反発係数
node INIT_BALL_HEIGHT = BALL_RADIUS + 50.0 # ボールの高さ


# ボタンの押下を回数に変換する関数
func toCount(accel) = 1

# 時変値合成に用いる関数
func mergeTupleInt3(lhs, rhs) = lhs
func mergeFloat(lhs, rhs) = lhs


# 出力時変値
# numButtonPressed の計算
node init[0] numLBtnPressed = numLBtnPressed@last[1] + toCount(lbtn)
node init[0] numCBtnPressed = numCBtnPressed@last[1] + toCount(cbtn)
node init[0] numRBtnPressed = numRBtnPressed@last[1] + toCount(rbtn)

node numLBtnPressedSync = (numLBtnPressed, numCBtnPressed@now, numRBtnPressed@now)
node numCBtnPressedSync = (numLBtnPressed@now, numCBtnPressed, numRBtnPressed@now)
node numRBtnPressedSync = (numLBtnPressed@now, numCBtnPressed@now, numRBtnPressed)

node numButtonPressed = numLBtnPressedSync
  @< mergeTupleInt3 >@ numCBtnPressedSync
  @< mergeTupleInt3 >@ numRBtnPressedSync

# ballPos の計算
node init[-1.0] tickHistory = tick
node dt =
  if tickHistory@last[1] < 0.0
    then 0.0
    else tickHistory - tickHistory@last[1]

node accelX = GRAVITY_X
node accelY = GRAVITY_Y

node velocityX = reflectedVelocityX@last[1] +
  (accelX * dt @< mergeFloat >@ lbtn @< mergeFloat >@ rbtn)
node velocityY = reflectedVelocityY@last[1] +
  (accelY * dt @< mergeFloat >@ cbtn)

node init[0.0] reflectedVelocityX = velocityX *
  (if (positionX@now - BALL_RADIUS < LEFT_WALL_POS  && velocityX < 0.0
    || positionX@now + BALL_RADIUS > RIGHT_WALL_POS && velocityX > 0.0)
    then -E
    else 1.0)
node init[0.0] reflectedVelocityY = velocityY *
  (if positionY@now - BALL_RADIUS < FLOOR_POS && velocityY < 0.0
    then -E
    else 1.0)
node init[0.0] positionX              = positionX@last[1] + velocityX @> 'positionX * dt
node init[INIT_BALL_HEIGHT] positionY = positionY@last[1] + velocityY @> 'positionY * dt

node ballPos = (positionX, positionY)
